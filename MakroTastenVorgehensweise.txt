Vorgehensweise meines Programms für die "Tastaturerweiterung"

code zu finden in folgendem Tab:
1	Multi-Makro-Stick
2	ButtonMatrix
3	Laufschrift
4	LedMatrixFunctions
5 	Send_REceve_RC
6	joystick
7	ledMatrixSetUp (not used, implemented in 1)
X	not implemented so far
y->z	in y funktion aufgerufen; in z definiert (void)
#	FUNKTIONIERT ANSCHEINEND NICHT	FUNKTIONIERT ANSCHEINEND NICHT	FUNKTIONIERT ANSCHEINEND NICHT	FUNKTIONIERT ANSCHEINEND NICHT



								zu finden in:

Setup()								1

Loop()								1
	recieve()						1->5
#		if available:					5
#		Serial.print...					.
#		if D_On -> Keypress				.
#		if D_Off-> Keypress				.
	getButton()						1->2
		Multiplexing der 4x4 Tasten			2	Rastert durch alle Reihen und Zeilen, setzt gegebenen Falls pressed auf true/false, setzt pressedButton auf den zuletzt gedrückten Button
	setMode()						1->2
		if pressed:					2
		->if pressedButton = A/B/C/D:			.	aktualisiert bei pressed ist true den Mode
		--> Mode = A/B/C/D				.
	buttonMakros()						1->2
		if Mode = 					2
		A:						.	genutzt für Programmier-Makros wie hochladen, besuche Arduino.cc, öffne COM-Port
			LedCoding()				2->4	führt die LED-Animation aus
			JoystickMoveWindow()			2->6	überträgt JoystickBewegungen auf Win+Arrow_Key bzw. Alt+TAB
			caseA()					2	führt falls pressed die jeweiligen Funktionen der 4x4 Tasten aus
				if pressed:			.
				Keypresses			.
		B:						.
			animateText()				2->4	fürt die LED-Animation aus
			joysticknaigation()			2->6	überträgt JoystickBewegungen auf Strg+Arrow_Key bzw. Scroll...
			caseB() (not in use)			X	angedacht für LaTeX-Makros wie \item, \section...
		C:						2
			musicLight()				2->4	führt dei LED-Animation aus
			joystickMusic()				2->6	überträgt JoystickBewegungen auf Musiksteuerung. -> Hotkey+NUMPAD -> durch AutoHotKey verarbeitet
#			caseC()					2->5	[Soll Daten senden / Licht ein/Ausschalten via RC]
#				if pressed:			5
#				transmit(KeyNumber1-4)		.	ruft die transmit() auf
#					switch to send mode	.	disable recieve, enable send und andersrum
#					send Data		.	sendet die betreffenden Daten
#					toggle "states"		.	"merkt sich, ob die Lampe an oder aus ist"
		D:
			TextLoop()				2->3	führt dei LED-Animation aus
#			caseD() (not in use) 			X	[geplant: lässt den Modus für den Fußknopf einstellen, zB Strg+z oder Upload Sketch
		E:							nur nach Neustart
			Smiley()				2->4	lässt "Hi" erscheinen
			joystickMouse()				2->6	lässt den Joystick zur Maus werden
				
